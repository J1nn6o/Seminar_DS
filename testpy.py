import pandas as pd
import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Circle, RegularPolygon
from matplotlib.path import Path
from matplotlib.projections.polar import PolarAxes
from matplotlib.projections import register_projection
from matplotlib.spines import Spine
from matplotlib.transforms import Affine2D


df = pd.read_csv('https://raw.githubusercontent.com/J1nn6o/Seminar_DS/refs/heads/main/newdataframe.csv')
# Th√™m h·∫≠u t·ªë ƒë·ªÉ tr√°nh tr√πng l·∫∑p gi·ªØa 'academic_performance' v√† 'final_academic_performance'
df['final_academic_performance'] = df['final_academic_performance'].astype(str) + ' '
# Th√™m h·∫≠u t·ªë ƒë·ªÉ tr√°nh tr√πng l·∫∑p gi·ªØa 'part_time_job' v√† 'extracurricular_activities'
df['extracurricular_activities'] = df['extracurricular_activities'].astype(str) + ' '
#S·ª≠a t√™n c·ªôt
df.rename(columns={'career_aspiration': 'major'}, inplace=True)

# page configuration
st.set_page_config(
    page_title="Student Performance Dashboard",
    page_icon="üè´",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Button to hide/show sidebar
if 'sidebar_visible' not in st.session_state:
    st.session_state.sidebar_visible = True

def toggle_sidebar():
    st.session_state.sidebar_visible = not st.session_state.sidebar_visible

# Display sidebar if visible
if st.session_state.sidebar_visible:
    with st.sidebar:
        st.title('üè´ Student Performance Dashboard')

        # Sankey Diagram Section
        st.header("Sankey Diagram")
        
        # Identify categorical columns
        categorical_cols = df.select_dtypes(include=['object', 'category', 'boolean']).drop(columns=['first_name', 'last_name']).columns
        
        # Create a selectbox widget "Number of categories"
        num_categories = st.selectbox(
            label="Number of categories to display",
            options=list(range(2, len(categorical_cols) + 1)),
        )

        # Store selected columns
        selected_columns = []

        # Create dynamic selectboxes for each category
        for i in range(num_categories):
            available_cols = [col for col in categorical_cols if col not in selected_columns]
            selected_col = st.selectbox(
                label=f"Category {i+1}",
                options=available_cols
            )
            selected_columns.append(selected_col)

        # Radar Chart Section
        st.header("Radar Chart")
        
        # Choose two student IDs to plot radar chart
        student1 = st.selectbox('Select the first student ID', df['id'])
        student2 = st.selectbox('Select the second student ID', df['id'])

        # Histogram Chart Section
        st.header("Top 10 Highest Subject")
        subject_list = ['math_score', 'history_score', 'physics_score', 'chemistry_score', 'biology_score', 'english_score', 'geography_score', 'average_score']
        selected_subject = st.selectbox('Select a subject to find top 10:', subject_list)

def groupby_df(selected_columns, df):
    dfs = []  # list to store subdataframes
    final_df = None  # kh·ªüi t·∫°o bi·∫øn cho final_df
    categorical_features = ['academic_performance', 'final_academic_performance']  # danh s√°ch c√°c feature c·∫ßn categorical

    # ƒê·ªãnh nghƒ©a th·ª© t·ª± ph√¢n lo·∫°i cho c√°c gi√° tr·ªã
    performance_order_academic = ['excellent', 'good', 'average', 'below average']
    performance_order_final = ['excellent ', 'good ', 'average ', 'below average ']

    # Ki·ªÉm tra xem c√≥ categorical feature n√†o trong selected_columns kh√¥ng
    for i in range(len(selected_columns) - 1):
        # Chuy·ªÉn ƒë·ªïi th√†nh ki·ªÉu string
        df[selected_columns[i]] = df[selected_columns[i]].astype(str)
        df[selected_columns[i + 1]] = df[selected_columns[i + 1]].astype(str)

        # Nh√≥m d·ªØ li·ªáu theo c·∫∑p c√°c feature
        grouped_df = df.groupby([selected_columns[i], selected_columns[i + 1]])['id'].count().reset_index()
        grouped_df.columns = ['source', 'target', 'value']

        # Ki·ªÉm tra v√† s·∫Øp x·∫øp cho t·ª´ng categorical feature
        if selected_columns[i] == 'academic_performance':
            grouped_df['source'] = pd.Categorical(grouped_df['source'], categories=performance_order_academic, ordered=True)

        if selected_columns[i] == 'final_academic_performance':
            grouped_df['source'] = pd.Categorical(grouped_df['source'], categories=performance_order_final, ordered=True)

        if selected_columns[i + 1] == 'academic_performance':
            grouped_df['target'] = pd.Categorical(grouped_df['target'], categories=performance_order_academic, ordered=True)

        if selected_columns[i + 1] == 'final_academic_performance':
            grouped_df['target'] = pd.Categorical(grouped_df['target'], categories=performance_order_final, ordered=True)

        # S·∫Øp x·∫øp theo th·ª© t·ª± ƒë√£ ƒë·ªãnh nghƒ©a cho c·∫£ source v√† target
        grouped_df = grouped_df.sort_values(by=['source', 'target'])

        dfs.append(grouped_df)

        # G√°n final_df cho c·∫∑p feature cu·ªëi c√πng
        if i == (len(selected_columns) - 2):
            final_df = grouped_df

    # G·ªôp t·∫•t c·∫£ c√°c DataFrame l·∫°i
    overall_df = pd.concat(dfs, axis=0)

    return overall_df, final_df

grouped_df, final_df = groupby_df(selected_columns, df)

# √Ånh x·∫° c√°c nodes
def find_unique_mapping(df1, df2):
    unique_source_target = list(pd.unique(df1[['source', 'target']].values.ravel('K')))
    mapping_dict = {value: idx for idx, value in enumerate(unique_source_target)}
    df1['source'] = df1['source'].map(mapping_dict)
    df1['target'] = df1['target'].map(mapping_dict)
    df2['source'] = df2['source'].map(mapping_dict)
    df2['target'] = df2['target'].map(mapping_dict)

    df_dict = df1.to_dict(orient='list')
    final_dict = df2.to_dict(orient='list')

    return unique_source_target, df_dict, final_dict

unique_source_target, df_dict, final_dict = find_unique_mapping(grouped_df, final_df)


def calculate_custom_node_positions(df_dict, unique_source_target, selected_columns):
    df = pd.DataFrame(df_dict)

    # T√≠nh t·ªïng gi√° tr·ªã cho t·ª´ng node
    total_values = df.groupby('source')['value'].sum().to_dict()

    x_positions = {}
    y_positions = {}

    # Gi√° tr·ªã y c·ªë ƒë·ªãnh cho t·ª´ng node
    fixed_y_values = {
        'gender': [0.25, 0.75],  # female, male
        'class': [0.1, 0.35, 0.6, 0.85],  # A, A1, B, C
        'academic_performance': [0.18, 0.62, 0.93, 1],  # excellent, good, average, below average
        'part_time_job': [0.4, 0.9],
        'final_academic_performance': [0.1, 0.5, 0.85, 1],
        'over_absence_days': [0.2, 0.8],
        'extracurricular_activities': [0.38, 0.9],
        'major':[0.02, 0.08, 0.13, 0.2, 0.27, 0.32, 0.38, 0.45, 0.51, 0.57, 0.63, 0.68, 0.75, 0.82, 0.88, 0.93, 1],
        'major_group':[0.1, 0.22, 0.45, 0.63, 0.7, 0.76, 0.82, 0.87, 0.93 , 1]

    }

    # Ph√¢n lo·∫°i c√°c node theo nh√≥m feature
    feature_groups = {
        'gender': [node for node in unique_source_target if 'female' in node or 'male' in node],
        'part_time_job': [node for node in unique_source_target if node in ['True', 'False']],
        'extracurricular_activities': [node for node in unique_source_target if node in ['True ', 'False ']],
        'class': [node for node in unique_source_target if node in ['A', 'A1', 'B', 'C']],
        'academic_performance': [node for node in unique_source_target if node in ['excellent', 'good', 'average', 'below average']],
        'over_absence_days': [node for node in unique_source_target if node in ['Yes', 'No']],  # assuming this tracks students with over absence days
        'final_academic_performance': [node for node in unique_source_target if node in ['excellent ', 'good ', 'average ', 'below average ']],
        'major': [node for node in unique_source_target if node in ['Software Engineer', 'Business Owner', 'Unknown', 'Banker', 'Lawyer', 'Accountant', 
                                                                     'Doctor', 'Real Estate Developer', 'Stock Investor', 'Construction Engineer', 
                                                                    'Artist', 'Game Developer',  'Government Officer', 'Teacher', 'Designer', 
                                                                    'Scientist','Writer']],
        'major_group': [node for node in unique_source_target if node in ['economics', 'computer science', 'unknown', 'law', 'art',
                                                                          'healthcare', 'politology', 'teaching', 'science researching', 'journalism']]
    }

    # T√≠nh to√°n v·ªã tr√≠ x v√† y cho t·ª´ng node trong t·ª´ng nh√≥m feature
    for feature in selected_columns:
        nodes = feature_groups.get(feature, [])
        # G√°n gi√° tr·ªã x cho nh√≥m feature
        num_features = len(selected_columns)
        if num_features > 0:
            spacing = (0.9 - 0.1) / (num_features - 1) if num_features > 1 else 0
            x_position = 0.1 + (selected_columns.index(feature) * spacing)
        else:
            x_position = 0.5  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ feature n√†o ƒë∆∞·ª£c ch·ªçn

        x_positions.update({node: x_position for node in nodes})

        # Ki·ªÉm tra n·∫øu c√≥ gi√° tr·ªã y c·ªë ƒë·ªãnh, n·∫øu kh√¥ng c√≥, chia ƒë·ªÅu v·ªã tr√≠ y cho c√°c node trong feature
        if feature in fixed_y_values:
            for i, node in enumerate(nodes):
                y_positions[node] = fixed_y_values[feature][i]
        else:
            # T√≠nh to√°n v·ªã tr√≠ y m·∫∑c ƒë·ªãnh (chia ƒë·ªÅu cho c√°c node)
            num_nodes = len(nodes)
            y_step = 1 / (num_nodes + 1)  # chia ƒë·ªÅu kho·∫£ng c√°ch gi·ªØa c√°c node
            for i, node in enumerate(nodes):
                y_positions[node] = y_step * (i + 1)

    return x_positions, y_positions

# Dummy Data cho m√†u s·∫Øc
color_list = [
     "rgba(31, 119, 180, 0.8)",
     "rgba(255, 127, 14, 0.8)",
     "rgba(44, 160, 44, 0.8)",
     "rgba(214, 39, 40, 0.8)",
     "rgba(148, 103, 189, 0.8)",
     "rgba(140, 86, 75, 0.8)",
     "rgba(227, 119, 194, 0.8)",
     "rgba(127, 127, 127, 0.8)",
     "rgba(188, 189, 34, 0.8)",
     "rgba(23, 190, 207, 0.8)",
     "rgba(31, 119, 180, 0.8)",
     "rgba(255, 127, 14, 0.8)",
     "rgba(44, 160, 44, 0.8)",
     "rgba(214, 39, 40, 0.8)",
     "rgba(148, 103, 189, 0.8)",
     "rgba(140, 86, 75, 0.8)",
     "rgba(227, 119, 194, 0.8)",
     "rgba(127, 127, 127, 0.8)",
     "rgba(188, 189, 34, 0.8)",
     "rgba(23, 190, 207, 0.8)",
     "rgba(31, 119, 180, 0.8)",
     "rgba(255, 127, 14, 0.8)",
     "rgba(44, 160, 44, 0.8)",
     "rgba(214, 39, 40, 0.8)",
     "rgba(148, 103, 189, 0.8)",
     "rgba(140, 86, 75, 0.8)",
     "rgba(227, 119, 194, 0.8)",
     "rgba(127, 127, 127, 0.8)",
     "rgba(188, 189, 34, 0.8)",
     "rgba(23, 190, 207, 0.8)",
     "rgba(31, 119, 180, 0.8)",
     "rgba(255, 127, 14, 0.8)",
     "rgba(44, 160, 44, 0.8)",
     "rgba(214, 39, 40, 0.8)",
     "rgba(148, 103, 189, 0.8)"]

def lighten_color(color_str, alpha=0.2):
    rgba_values = color_str.strip("rgba()").split(",")
    return f"rgba({rgba_values[0]}, {rgba_values[1]}, {rgba_values[2]}, {alpha})"

def ensure_color_list_length(color_list, unique_source_target_length):
    if len(color_list) < unique_source_target_length:
        color_list = (color_list * (unique_source_target_length // len(color_list) + 1))[:unique_source_target_length]
    return color_list

def calculate_total_values_by_source(df_dict):
    df = pd.DataFrame(df_dict)
    total_values_by_source = df.groupby('source')['value'].sum().to_dict()
    return total_values_by_source

def calculate_total_values_by_target(final_df):
    df = pd.DataFrame(final_df)
    total_values_by_target = df.groupby('target')['value'].sum().to_dict()
    return total_values_by_target

# H√†m v·∫Ω Sankey v·ªõi x/y v·ªã tr√≠ ƒë√£ ƒëi·ªÅu ch·ªânh
def draw_sankey(df_dict, final_dict, unique_source_target, color_list):
    color_list = ensure_color_list_length(color_list, len(unique_source_target))

    total_values_by_source = calculate_total_values_by_source(df_dict)
    total_values_by_target = calculate_total_values_by_target(final_dict)

    total_value = sum(df_dict['value'])
    x_positions, y_positions = calculate_custom_node_positions(pd.DataFrame(df_dict), unique_source_target, selected_columns)

    # G√°n c√°c node v·ªõi total values v√† t√≠nh v·ªã tr√≠
    labeled_nodes = []
    for i, label in enumerate(unique_source_target):
        source_value = total_values_by_source.get(i, 0)
        target_value = total_values_by_target.get(i, 0)
        if source_value != 0:
            labeled_nodes.append(f"{label}: {source_value}")
        else:
            labeled_nodes.append(f"{label}: {target_value}")

    link_colors = [lighten_color(color_list[src]) for src in df_dict['source']]

    fig = go.Figure(data=[go.Sankey(
        node=dict(
            pad=15,
            thickness=20,
            line=dict(color="black", width=0.5),
            label=labeled_nodes,
            x=[x_positions[node] for node in unique_source_target],
            y=[y_positions[node] for node in unique_source_target],
            color=color_list[:len(unique_source_target)]
        ),
        textfont=dict(
            color='black',  # Set label text color to black
            size=14,  # Font size for the labels
            weight='bold'
        ),
        link=dict(
            source=df_dict['source'],
            target=df_dict['target'],
            value=df_dict['value'],
            color=link_colors
        )
    )])

    # Dynamic title for the Sankey diagram
    title_text = "Student Performance due to " + " and ".join(selected_columns)
    fig.update_layout(title_text=title_text, font_size=24, width=4200, height=550)

    # Show the figure in Streamlit
    st.plotly_chart(fig)

def radar_factory(num_vars, frame='circle'):
    """Create a radar chart with `num_vars` axes."""
    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)

    class RadarTransform(PolarAxes.PolarTransform):
        def transform_path_non_affine(self, path):
            if path._interpolation_steps > 1:
                path = path.interpolated(num_vars)
            return Path(self.transform(path.vertices), path.codes)

    class RadarAxes(PolarAxes):
        name = 'radar'
        PolarTransform = RadarTransform

        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)
            self.set_theta_zero_location('N')

        def fill(self, *args, closed=True, **kwargs):
            return super().fill(closed=closed, *args, **kwargs)

        def plot(self, *args, color='black', **kwargs):
            """V·∫Ω c√°c ƒë∆∞·ªùng n·ªëi t·ª´ t√¢m ƒë·∫øn c√°c ƒë·ªânh."""
            lines = super().plot(*args, color=color, **kwargs)
            for line in lines:
                self._close_line(line)

        def _close_line(self, line):
            x, y = line.get_data()
            if x[0] != x[-1]:
                x = np.concatenate((x, [x[0]]))
                y = np.concatenate((y, [y[0]]))
                line.set_data(x, y)

        def set_varlabels(self, labels):
            self.set_thetagrids(np.degrees(theta), labels)
            self.set_yticks([])  # B·ªè tr·ª•c s·ªë
            # ƒêi·ªÅu ch·ªânh kho·∫£ng c√°ch cho nh√£n
            for i, label in enumerate(self.get_xticklabels()):
                angle_rad = np.radians(theta[i])
                distance = - 0.7  # Kho·∫£ng c√°ch m·∫∑c ƒë·ªãnh (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh theo √Ω mu·ªën)

                x = np.cos(angle_rad) * distance
                y = np.sin(angle_rad) * distance
                label.set_position((x, y))

        def _gen_axes_patch(self):
            if frame == 'circle':
                return Circle((0.5, 0.5), 0.5)
            elif frame == 'polygon':
                return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor="k")
            else:
                raise ValueError("unknown value for 'frame': %s" % frame)

        def draw(self, renderer):
            super().draw(renderer)

        def _gen_axes_spines(self):
            if frame == 'circle':
                return super()._gen_axes_spines()
            elif frame == 'polygon':
                spine = Spine(axes=self,
                              spine_type='circle',
                              path=Path.unit_regular_polygon(num_vars))
                spine.set_transform(Affine2D().scale(.5).translate(.5, .5) + self.transAxes)
                return {'polar': spine}
            else:
                raise ValueError("unknown value for 'frame': %s" % frame)

    register_projection(RadarAxes)
    return theta


# H√†m bi·ªÉu ƒë·ªì radar
def radar_chart(student1, student2):
    data_student1 = df[df['id'] == student1][['math_score', 'history_score', 'physics_score', 'chemistry_score', 'biology_score', 'english_score', 'geography_score']].values.flatten()
    data_student2 = df[df['id'] == student2][['math_score', 'history_score', 'physics_score', 'chemistry_score', 'biology_score', 'english_score', 'geography_score']].values.flatten()

    categories = ['Math', 'History', 'Physics', 'Chemistry', 'Biology', 'English', 'Geography']
    theta = radar_factory(len(categories), frame='polygon')

    fig, ax = plt.subplots(figsize=(4, 4), subplot_kw=dict(projection='radar'))
    # Ki·ªÉm tra n·∫øu hai student ID b·∫±ng nhau
    if student1 == student2:
        ax.plot(theta, data_student1, label=f'Student {student1}', color='#cf464b')  # V·∫Ω m·ªôt ƒë∆∞·ªùng
        ax.fill(theta, data_student1, color='#d96c70', alpha=0.1)
    else:
        ax.plot(theta, data_student1, label=f'Student {student1}', color='#cf464b')
        ax.fill(theta, data_student1, color='#d96c70', alpha=0.3)

        ax.plot(theta, data_student2, label=f'Student {student2}', color='#386b56')
        ax.fill(theta, data_student2, color='#7ce6b7', alpha=0.3)

    ax.set_varlabels(categories)
    plt.title(f"Comparison: Student {student1} vs Student {student2}")
    plt.legend(loc='lower right', bbox_to_anchor=(1.4, -0.1), fontsize='small')

    st.pyplot(fig)  # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì radar

# Progess bar
def get_top_students(selected_subject):
    # S·∫Øp x·∫øp theo m√¥n h·ªçc ƒë∆∞·ª£c ch·ªçn v√† average score
    top_students = df.nlargest(12, [selected_subject, 'average_score'])
    top_students.reset_index(drop=True, inplace=True)
    return top_students

# Example usage within a Streamlit app
if __name__ == "__main__":
    st.title("Student Performance Dashboard")
    
    st.header("Sankey Diagram")
    draw_sankey(df_dict, final_dict, unique_source_target, color_list)

    # Using columns to split the interface for Sankey and Radar chart
    col2, col3 = st.columns((4, 6), gap='medium')

    with col2:
        # Plot radar chart
        radar_chart(student1, student2)
        
        # L·ªçc d·ªØ li·ªáu c·ªßa hai h·ªçc sinh ƒë√£ ch·ªçn
        selected_students = df[df['id'].isin([student1, student2])]
        selected_students = selected_students.set_index('id').loc[[student1, student2]].reset_index()
        
        

    with col3:
        st.markdown('#### Top Student Grade')
        # L·∫•y top 5 sinh vi√™n theo m√¥n h·ªçc ƒë√£ ch·ªçn
        top_students = get_top_students(selected_subject)

        # T·∫°o DataFrame m·ªõi v·ªõi gi√° tr·ªã ƒë√£ l√†m tr√≤n cho ƒëi·ªÉm s·ªë
        top_students['selected_subject'] = top_students[selected_subject]

        st.dataframe(top_students,
                    column_order=("id", "selected_subject"),
                    hide_index=True,
                    width=500,
                    height = 500,
                    column_config={
                        "id": st.column_config.TextColumn(
                            "id",
                        ),
                        "selected_subject": st.column_config.ProgressColumn(
                            "Score",  # ƒê·∫∑t t√™n cho c·ªôt thanh ti·∫øn ƒë·ªô
                            format="%.2f",  # ƒê·ªãnh d·∫°ng ƒëi·ªÉm s·ªë v·ªõi 2 ch·ªØ s·ªë sau d·∫•u ph·∫©y
                            min_value=0,
                            max_value=100  # Gi·∫£ s·ª≠ ƒëi·ªÉm t·ªëi ƒëa l√† 100
                        )}
                    )
    # Hi·ªÉn th·ªã DataFrame c·ªßa hai h·ªçc sinh ƒë√£ ch·ªçn
    st.write(f"Information of Student {student1} and Student {student2}")
    st.dataframe(selected_students)